// Generated by cdk-import
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";

/**
 * The flex cluster resource provides access to your flex cluster configurations. The resource lets you create, edit and delete flex clusters. The resource requires your Project ID.
 *
 * @schema CfnFlexClusterProps
 */
export interface CfnFlexClusterProps {
  /**
   * Profile used to provide credentials information, (a secret with the cfn/atlas/profile/{Profile}, is required), if not provided default is used
   *
   * @schema CfnFlexClusterProps#Profile
   */
  readonly profile?: string;

  /**
   * Unique identifier of the project the cluster belongs to.
   *
   * @schema CfnFlexClusterProps#ProjectId
   */
  readonly projectId: string;

  /**
   * Human-readable label that identifies the flex cluster.
   *
   * @schema CfnFlexClusterProps#Name
   */
  readonly name: string;

  /**
   * @schema CfnFlexClusterProps#ProviderSettings
   */
  readonly providerSettings: ProviderSettings;

  /**
   * @schema CfnFlexClusterProps#BackupSettings
   */
  readonly backupSettings?: BackupSettings;

  /**
   * @schema CfnFlexClusterProps#ConnectionStrings
   */
  readonly connectionStrings?: ConnectionStrings;

  /**
   * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
   *
   * @schema CfnFlexClusterProps#TerminationProtectionEnabled
   */
  readonly terminationProtectionEnabled?: boolean;

  /**
   * Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the flex cluster.
   *
   * @schema CfnFlexClusterProps#Tags
   */
  readonly tags?: Tag[];
}

/**
 * Converts an object of type 'CfnFlexClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnFlexClusterProps(
  obj: CfnFlexClusterProps | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    Profile: obj.profile,
    ProjectId: obj.projectId,
    Name: obj.name,
    ProviderSettings: toJson_ProviderSettings(obj.providerSettings),
    BackupSettings: toJson_BackupSettings(obj.backupSettings),
    ConnectionStrings: toJson_ConnectionStrings(obj.connectionStrings),
    TerminationProtectionEnabled: obj.terminationProtectionEnabled,
    Tags: obj.tags?.map((y) => toJson_Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
 *
 * @schema ProviderSettings
 */
export interface ProviderSettings {
  /**
   * Cloud service provider on which MongoDB Cloud provisioned the flex cluster.
   *
   * @schema ProviderSettings#BackingProviderName
   */
  readonly backingProviderName: string;

  /**
   * Human-readable label that identifies the geographic location of your MongoDB flex cluster. The region you choose can affect network latency for clients accessing your databases.
   *
   * @schema ProviderSettings#RegionName
   */
  readonly regionName: string;

  /**
   * Storage capacity available to the flex cluster expressed in gigabytes.
   *
   * @schema ProviderSettings#DiskSizeGB
   */
  readonly diskSizeGb?: number;

  /**
   * Human-readable label that identifies the cloud service provider.
   *
   * @schema ProviderSettings#ProviderName
   */
  readonly providerName?: string;
}

/**
 * Converts an object of type 'ProviderSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderSettings(
  obj: ProviderSettings | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    BackingProviderName: obj.backingProviderName,
    RegionName: obj.regionName,
    DiskSizeGB: obj.diskSizeGb,
    ProviderName: obj.providerName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Flex backup configuration
 *
 * @schema BackupSettings
 */
export interface BackupSettings {
  /**
   * Flag that indicates whether backups are performed for this flex cluster. Backup uses flex cluster backups.
   *
   * @schema BackupSettings#Enabled
   */
  readonly enabled?: boolean;
}

/**
 * Converts an object of type 'BackupSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_BackupSettings(
  obj: BackupSettings | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    Enabled: obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Collection of Uniform Resource Locators that point to the MongoDB database.
 *
 * @schema ConnectionStrings
 */
export interface ConnectionStrings {
  /**
   * Public connection string that you can use to connect to this cluster. This connection string uses the mongodb:// protocol.
   *
   * @schema ConnectionStrings#Standard
   */
  readonly standard?: string;

  /**
   * Public connection string that you can use to connect to this flex cluster. This connection string uses the mongodb+srv:// protocol.
   *
   * @schema ConnectionStrings#StandardSrv
   */
  readonly standardSrv?: string;
}

/**
 * Converts an object of type 'ConnectionStrings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectionStrings(
  obj: ConnectionStrings | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    Standard: obj.standard,
    StandardSrv: obj.standardSrv,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */

/**
 * List that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster.
 *
 * @schema tag
 */
export interface Tag {
  /**
   * Constant that defines the set of the tag. For example, environment in the environment : production tag.
   *
   * @schema tag#Key
   */
  readonly key: string;

  /**
   * Variable that belongs to the set of the tag. For example, production in the environment : production tag.
   *
   * @schema tag#Value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'Tag' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Tag(
  obj: Tag | undefined
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    Key: obj.key,
    Value: obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {}
  );
}
/* eslint-enable max-len, quote-props */

/**
 * A CloudFormation `MongoDB::Atlas::FlexCluster`
 *
 * @cloudformationResource MongoDB::Atlas::FlexCluster
 * @stability external
 */
export class CfnFlexCluster extends cdk.CfnResource {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME = "MongoDB::Atlas::FlexCluster";

  /**
   * Resource props.
   */
  public readonly props: CfnFlexClusterProps;

  /**
   * Attribute `MongoDB::Atlas::FlexCluster.Id`
   */
  public readonly attrId: string;
  /**
   * Attribute `MongoDB::Atlas::FlexCluster.StateName`
   */
  public readonly attrStateName: string;
  /**
   * Attribute `MongoDB::Atlas::FlexCluster.ClusterType`
   */
  public readonly attrClusterType: string;
  /**
   * Attribute `MongoDB::Atlas::FlexCluster.CreateDate`
   */
  public readonly attrCreateDate: string;
  /**
   * Attribute `MongoDB::Atlas::FlexCluster.MongoDBVersion`
   */
  public readonly attrMongoDBVersion: string;
  /**
   * Attribute `MongoDB::Atlas::FlexCluster.VersionReleaseSystem`
   */
  public readonly attrVersionReleaseSystem: string;

  /**
   * Create a new `MongoDB::Atlas::FlexCluster`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(
    scope: constructs.Construct,
    id: string,
    props: CfnFlexClusterProps
  ) {
    super(scope, id, {
      type: CfnFlexCluster.CFN_RESOURCE_TYPE_NAME,
      properties: toJson_CfnFlexClusterProps(props)!,
    });

    this.props = props;

    this.attrId = cdk.Token.asString(this.getAtt("Id"));
    this.attrStateName = cdk.Token.asString(this.getAtt("StateName"));
    this.attrClusterType = cdk.Token.asString(this.getAtt("ClusterType"));
    this.attrCreateDate = cdk.Token.asString(this.getAtt("CreateDate"));
    this.attrMongoDBVersion = cdk.Token.asString(this.getAtt("MongoDBVersion"));
    this.attrVersionReleaseSystem = cdk.Token.asString(
      this.getAtt("VersionReleaseSystem")
    );
  }
}
